Following https://www.compose.com/articles/embrace-sql-with-hugsql-clojure-and-postgresql/
https://www.hugsql.org/
https://clojure.github.io/java.jdbc/

create user music_lover with password 'this-is-music';
create database musicdb with owner music_lover;
grant all privileges on database musicdb to music_lover;

psql --port=5432 -h localhost -U music_lover -d musicdb

this-is-music

(pprint (sql/artists-by-name-like db-con {:name-like "L%"})) 


(clojure.java.jdbc/with-db-transaction [tx db-con]  
    (sql/new-users tx {:users [["corn@paper.io"  "primitive" "corn coding partner"]
                             ["krispy@paper.io"   "primitive" "krispy coding partner"]
                             ["farout@paper.io" "primitive" "farout coding partner"]]}))  

(clojure.java.jdbc/with-db-transaction [tx db-con]  
    ;; (sql/new-rating-type tx {:name "primitive paper" :description "ratings by paper people"})
    (sql/new-rating tx {:email "primitive@paper.io" :rating 7 :artist_name "Pearl Jam" :rating_type_name "primitive paper"}) 
)

INSERT INTO ratings (artist_name, email, rating_type_name, rating)  
VALUES ( 'Pearl Jam' , 'primitive@paper.io' , 'primitive paper' , 5 );


(clojure.java.jdbc/with-db-transaction [tx db-con]  
    (sql/new-user tx {:email "primitive@paper.io" :pass "primitive" :role "paper coding partner"})
    ;; (sql/new-rating tx {:email "primitive@paper.io" :rating 5 :artist_name "Pearl Jam" :rating_type_name "primitive paper"}) 
)


(clojure.java.jdbc/with-db-transaction [tx db-con]  
    (sql/update-rating-type tx {:name "primitive paper" :description "hot paper"})
    ;; (sql/new-rating tx {:email "primitive@paper.io" :rating 5 :artist_name "Pearl Jam" :rating_type_name "primitive paper"}) 
)
(sql/tx-new-user {:email "john@acme.com" :pass "some-stuff" :role "just a dude"})

(clojure.java.jdbc/with-db-transaction [tx db-con]
    (sql/delete-user {:email ""}))

' OR '1'='1
;
(sql/users-by-email db-con {:email "hays@compose.io"})
({:email "hays@compose.io", :pass "secret", :role "music_lover"})
(sql/users-by-email db-con {:email "' OR '1'='1"})
(sql/users-by-email db-con {:email "' OR 1=1"})

(hugsql.parameters/identifier-param-sqlvec {:table-name "example"})

SELECT *
FROM artists
WHERE name
LIKE "L%"
(pprint (sql/artists-by-name-like db-con {:name-like "' OR '1'='1"})) 

SELECT * FROM artists WHERE name LIKE '' OR '1'='1';

 SELECT *  
	  FROM artists
	 WHERE name 
	  LIKE 'L%'
2017-11-14 00:30:44.421 CST [15899] music_lover@musicdb DETAIL:  parameters: $1 = 'L%'

 SELECT *  
	  FROM artists
	 WHERE name 
	  LIKE ''' OR ''1''=''1'
2017-11-14 00:31:36.237 CST [15931] music_lover@musicdb DETAIL:  parameters: $1 = ''' OR ''1''=''1'
(sql/users-by-email db-con {:email "Shamirs; SELECT current_user;"})

(require 'clojure.repl)

(sql/users-by-email-sqlvec {:email "hello@example.com"})
(sql/users-by-email-sqlvec {:email "hello@example.com'; select * from users; "})
(sql/artists-by-name-like-sqlvec {:name-like "' OR '1'='1"})

(sql/artists-by-name-like {:name-like "' OR '1'='1"})
SELECT * FROM artists WHERE name LIKE '' OR '1'='1';
(sql/artists-by-name-like {:name-like "P%"})

In the REPL, do this first:
ted.core=> (mount.core/start)
Then you can do
ted.core=> (sql/users-all)
{:email "hays@compose.io", :pass "secret", :role "music_lover"}

Connection options at https://github.com/tomekw/hikari-cp#configuration-options  

NO:
(sql/new-users {:users [{:email "a@gmail.com" :password "hello" :role "dude"} {:email "a@gmail.com" :password "hello" :role "dude"}]})

NO:
(sql/new-users [{:email "a@gmail.com" :password "hello" :role "dude"} {:email "a@gmail.com" :password "hello" :role "dude"}])

YES:
(sql/new-users {:users [ ["a@gmail.com", "hello", "dude" ] ["b@gmail.com", "hello", "dude"] ]})


