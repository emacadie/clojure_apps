Prop file at twit-r.properties for now
Database:

lein deps
lein compile
lein run :greeting "hello" :filepath "/home/ericm/tmp/clojure/twitter-retriever/twit-r.properties"

Reload in the repl: (use 'your.namespace :reload) or (use 'your.namespace :reload-all)
or require
in repl:
(require '[clojure.java.io :as io])
(require '[clojure.java.io :as io])
(require '[twitter-retriever.core :as tr-c])
(require 'ss :as ss)
This did not work: (require 'twitter-retriever.core :as tr-c)
https://stackoverflow.com/questions/7658981/how-to-reload-a-clojure-file-in-repl
(require 'my.namespace :reload-all)
using reload in code (inside ns):
(ns ted.core
  (:require [ted.db :refer [db-con]]
            [ted.sql :as sql]
            [clojure.pprint :as pprint]))

Another reload option, run both of these:
(require '[clojure.tools.namespace.repl])
(clojure.tools.namespace.repl/refresh)

Another option:
https://github.com/grampelberg/lein-autoreload
This did not work

to get to repl in emacs: M-x cider-jack-in

;; If you’re new to CIDER it is highly recommended to go through its
;; manual first. Type <M-x cider-view-manual> to view it.
;; In case you’re seeing any warnings you should consult the manual’s
;; "Troubleshooting" section.
;;
;; Here are few tips to get you started:
;;
;; * Press <C-h m> to see a list of the keybindings available (this
;;   will work in every Emacs buffer)
;; * Press <,> to quickly invoke some REPL command
;; * Press <C-c C-z> to switch between the REPL and a Clojure file
;; * Press <M-.> to jump to the source of something (e.g. a var, a
;;   Java method)
;; * Press <C-c C-d C-d> to view the documentation for something (e.g.
;;   a var, a Java method)
;; * Enable ‘eldoc-mode’ to display function & method signatures in the minibuffer.
;; * Print CIDER’s refcard and keep it close to your keyboard.

From lein notes:
Providing a -m argument will tell Leiningen to look for the -main function in another namespace. Setting a default :main in project.clj lets you omit -m.
Using example from https://github.com/clojure/tools.cli#example-usage
lein run -m twitter-retriever.cline -vvvp8080 foo --help --invalid-opt
Or
lein run  -vvvp8080 foo --help --invalid-opt
or
lein run -m twitter-retriever.cline --port 8080 foo --help --invalid-opt
That also sets port to 8080
Not clear what is going on with "v"
They are counting the number of v's, which is a really weird way to do it in my opinion

lein run -m twitter-retriever.cline --port 8080 -vv 3 --file-path "/usr/local/log"

lein run -m twitter-retriever.cline --port 8080 -vv 3 --file-path "/usr/local/log" --kk
In cline
here is something: {:options {:port 8080, :verbosity 2, :file-path /usr/local/log}, :arguments [3], :summary   -p, --port PORT            80  Port number
  -v                             Verbosity level
  -f, --file-path FILE_PATH      File path
  -h, --help, :errors [Unknown option: "--kk"]}


